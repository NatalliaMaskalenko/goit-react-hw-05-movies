{"version":3,"sources":["services/moviedbAPI.js","Components/Searchbar/Searchbar.module.css","Components/Searchbar/Searchbar.js","views/MoviesPage.js"],"names":["BASE_URL","API_KEY","fetchWithErrorHandling","a","url","config","fetch","response","ok","json","Promise","reject","Error","trendMoviedbAPI","searchMoviedbAPI","name","detailsMoviedbAPI","movieId","actorsMoviedbAPI","reviewsMoviedbAPI","module","exports","Searchbar","onSubmit","useState","setName","className","s","searchbar","e","preventDefault","trim","window","alert","searchForm","value","searchFormInput","type","autoComplete","autoFocus","placeholder","onChange","currentTarget","toLowerCase","searchFormButton","searchFormButtonLabel","MoviesPage","location","useLocation","history","useHistory","movies","setMovies","console","log","status","setStatus","useEffect","moviedbAPI","then","r","results","localStorage","setItem","JSON","stringify","length","push","search","color","height","width","timeout","map","movie","to","pathname","id","state","from","title"],"mappings":"gVAAMA,EAAQ,+BACRC,EAAU,mC,SAEDC,I,2EAAf,4CAAAC,EAAA,6DAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SAC2BC,MAAMF,EAAKC,GADtC,YACUE,EADV,QAEoBC,GAFpB,iCAGgBD,EAASE,OAHzB,gDAIUC,QAAQC,OAAO,IAAIC,MAAM,cAJnC,mF,wBAQQ,SAASC,IACb,OAAOX,EAAuB,GAAD,OAAIF,EAAJ,uCAA2CC,IAGrE,SAASa,EAAiBC,GAC7B,OAAOb,EAAuB,GAAD,OAAIF,EAAJ,iCAAqCC,EAArC,kBAAsDc,EAAtD,YAG1B,SAASC,EAAkBC,GAC9B,OAAOf,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBiB,EAAtB,oBAAyChB,IAGnE,SAASiB,EAAiBD,GAC7B,OAAOf,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBiB,EAAtB,4BAAiDhB,IAG3E,SAASkB,EAAkBF,GAC9B,OAAOf,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBiB,EAAtB,4BAAiDhB,M,mBC3BlFmB,EAAOC,QAAU,CAAC,UAAY,6BAA6B,WAAa,8BAA8B,iBAAmB,oCAAoC,sBAAwB,yCAAyC,gBAAkB,qC,0KCGjO,SAASC,EAAT,GAAgC,IAAZC,EAAW,EAAXA,SAC/B,EAAwBC,mBAAS,IAAjC,mBAAOT,EAAP,KAAaU,EAAb,KAeA,OACI,wBAAQC,UAAWC,IAAEC,UAArB,SACI,uBAAML,SAZO,SAAAM,GACjBA,EAAEC,iBACkB,KAAhBf,EAAKgB,QAITR,EAASR,GACTU,EAAQ,KAJJO,OAAOC,MAAM,oFASiBP,UAAWC,IAAEO,WAA3C,UACI,uBACIC,MAAOpB,EACPW,UAAWC,IAAES,gBACbC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZzB,KAAK,SACL0B,SAxBS,SAAAZ,GACrBJ,EAAQI,EAAEa,cAAcP,MAAMQ,kBAyBtB,wBAAQN,KAAK,SAASX,UAAWC,IAAEiB,iBAAnC,SACI,sBAAMlB,UAAWC,IAAEkB,sBAAnB,2BClBL,SAASC,IACpB,IAAMC,EAAWC,cACXC,EAAUC,cAEhB,EAA4B1B,mBAAS,IAArC,mBAAO2B,EAAP,KAAeC,EAAf,KACAC,QAAQC,IAAIH,GACZ,MAAwB3B,mBAAS,IAAjC,mBAAOT,EAAP,KAAaU,EAAb,KACA,EAA4BD,mBAAS,QAArC,mBAAO+B,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACD1C,IAILyC,EAAU,WACVE,IAA4B3C,GAAM4C,MAAK,SAAAC,GAInC,GAHAR,EAAUQ,EAAEC,SACZC,aAAaC,QAAQ,SAAUC,KAAKC,UAAUL,EAAEC,UAChDL,EAAU,WACe,IAArBI,EAAEC,QAAQK,OACV,OAAOV,EAAU,eAG1B,CAACzC,IAgBJ,OACI,qCACI,cAACO,EAAD,CAAWC,SAPM,SAAAR,GACrBU,EAAQV,GACRkC,EAAQkB,KAAR,2BAAiBpB,GAAjB,IAA2BqB,OAAO,SAAD,OAAUrD,SAM3B,SAAXwC,GAAqB,6DACV,YAAXA,GAAwB,cAAC,IAAD,CACzBlB,KAAK,OACLgC,MAAM,UACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,MAEG,YAAXjB,GACG,6BACCJ,GAAUA,EAAOsB,KAAI,SAAAC,GAAK,OACvB,6BACI,cAAC,IAAD,CAAMC,GAAI,CACNC,SAAS,WAAD,OAAYF,EAAMG,IAC1BC,MAAO,CACHC,KAAMhC,EACNqB,OAAO,SAAD,OAAUrD,KAJxB,SAMI2D,EAAMM,SAPLN,EAAMG,SAUX,UAAXtB,GAAsB","file":"static/js/MoviesPage.82796128.chunk.js","sourcesContent":["const BASE_URL = `https://api.themoviedb.org/3`;\r\nconst API_KEY = 'd487c6d6cc7f608fd9f791a1c234621c';\r\n\r\nasync function fetchWithErrorHandling(url = '', config = {}) {\r\n    const response = await fetch(url, config);\r\n    return response.ok\r\n        ? await response.json()\r\n        : Promise.reject(new Error('Not Found'));\r\n};\r\n\r\n\r\nexport  function trendMoviedbAPI() {\r\n    return fetchWithErrorHandling(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`)\r\n};\r\n\r\nexport function searchMoviedbAPI(name) {\r\n    return fetchWithErrorHandling(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${name}&page=1`)\r\n};\r\n\r\nexport function detailsMoviedbAPI(movieId) {\r\n    return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`)\r\n};\r\n\r\nexport function actorsMoviedbAPI(movieId) {\r\n    return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`)\r\n};\r\n\r\nexport function reviewsMoviedbAPI(movieId) {\r\n    return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`)\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchbar\":\"Searchbar_searchbar__QzQSX\",\"searchForm\":\"Searchbar_searchForm__1A9PT\",\"searchFormButton\":\"Searchbar_searchFormButton__4fgeZ\",\"searchFormButtonLabel\":\"Searchbar_searchFormButtonLabel__3SaVE\",\"searchFormInput\":\"Searchbar_searchFormInput__26qFR\"};","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Searchbar.module.css';\r\n\r\nexport default function Searchbar({onSubmit}) {\r\n    const [name, setName] = useState('');\r\n\r\n    const handleNameChange = e => {\r\n        setName(e.currentTarget.value.toLowerCase())\r\n    };\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (name.trim() === '') {\r\n            window.alert('Введите запрос');\r\n            return;\r\n         }\r\n        onSubmit(name);\r\n        setName('');\r\n    }   \r\n\r\n    return (\r\n        <header className={s.searchbar}>\r\n            <form onSubmit={handleSubmit} className={s.searchForm}>                \r\n                <input\r\n                    value={name}\r\n                    className={s.searchFormInput}\r\n                    type=\"text\"\r\n                    autoComplete=\"off\"\r\n                    autoFocus\r\n                    placeholder=\"Search movie\"\r\n                    name=\"search\"\r\n                    onChange={handleNameChange}\r\n                />\r\n                <button type=\"submit\" className={s.searchFormButton}>\r\n                    <span className={s.searchFormButtonLabel}>Search</span>\r\n                </button>\r\n            </form>\r\n        </header>\r\n    )\r\n};\r\n\r\nSearchbar.propTypes = {\r\n    onSubmit: PropTypes.func,\r\n};\r\n\r\n","import { useState, useEffect } from 'react';\r\nimport { Link  } from 'react-router-dom';\r\nimport Loader from \"react-loader-spinner\";\r\nimport { useHistory, useLocation } from 'react-router';\r\n\r\nimport * as moviedbAPI from '../services/moviedbAPI';\r\nimport Searchbar from '../Components/Searchbar/Searchbar';\r\n\r\n// const useLocalStorage = (key, defaultValue) => {\r\n//    const [state, setState] = useState(() => {\r\n//        return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue\r\n//    });\r\n//     return [state, setState]\r\n// };\r\n\r\n\r\nexport default function MoviesPage() {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    const [movies, setMovies] = useState([]);\r\n    console.log(movies);\r\n    const [name, setName] = useState('');\r\n    const [status, setStatus] = useState('init');\r\n    \r\n    useEffect(() => {\r\n        if (!name) {\r\n            return;\r\n        };\r\n\r\n        setStatus('pending');\r\n        moviedbAPI.searchMoviedbAPI(name).then(r => {\r\n            setMovies(r.results);\r\n            localStorage.setItem('movies', JSON.stringify(r.results));      \r\n            setStatus('success');\r\n            if (r.results.length === 0) {\r\n                return setStatus('error')\r\n            }\r\n        })\r\n    }, [name]\r\n    );\r\n\r\n    // useEffect(() => {\r\n    //     if (!JSON.parse(localStorage.getItem('movies'))) {\r\n    //         return;\r\n    //     }\r\n    //     setMovies(JSON.parse(localStorage.getItem('movies')))\r\n    // },[movies]        \r\n    // )\r\n    \r\n    const handleFormSubmit = name => {\r\n        setName(name);\r\n        history.push({...location, search:`query=${name}`})       \r\n  };\r\n\r\n    return ( \r\n        <>\r\n            <Searchbar onSubmit={handleFormSubmit} />\r\n            {status === 'init' && <h1>Hello! Search something....</h1>}\r\n            {status === 'pending' && <Loader\r\n            type=\"Puff\"\r\n            color=\"#00BFFF\"\r\n            height={100}\r\n            width={100}\r\n            timeout={3000} //3 secs\r\n            />}\r\n            {status === 'success' &&\r\n                <ul>\r\n                {movies && movies.map(movie =>\r\n                    <li key={movie.id}>\r\n                        <Link to={{\r\n                            pathname:`/movies/${movie.id}`,\r\n                            state: {\r\n                                from: location,\r\n                                search:`query=${name}`\r\n                            }\r\n                        }}>{movie.title}</Link>\r\n                    </li>)}\r\n                </ul>}\r\n            {status === 'error' && <h2>No results...</h2>}\r\n        </>\r\n    )\r\n};\r\n"],"sourceRoot":""}