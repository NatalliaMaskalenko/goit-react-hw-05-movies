{"version":3,"sources":["services/moviedbAPI.js","Components/Searchbar/Searchbar.js","views/MoviesPage.js"],"names":["BASE_URL","API_KEY","fetchWithErrorHandling","a","url","config","fetch","response","ok","json","Promise","reject","Error","trendMoviedbAPI","searchMoviedbAPI","name","detailsMoviedbAPI","movieId","actorsMoviedbAPI","reviewsMoviedbAPI","Searchbar","onSubmit","useState","setName","className","e","preventDefault","trim","window","alert","value","type","autoComplete","autoFocus","placeholder","onChange","currentTarget","toLowerCase","MoviesPage","movies","setMovies","status","setStatus","useEffect","moviedbAPI","then","r","results","color","height","width","timeout","map","movie","to","id","title"],"mappings":"gVAAMA,EAAQ,+BACRC,EAAU,mC,SAEDC,I,2EAAf,4CAAAC,EAAA,6DAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SAC2BC,MAAMF,EAAKC,GADtC,YACUE,EADV,QAEoBC,GAFpB,iCAGgBD,EAASE,OAHzB,gDAIUC,QAAQC,OAAO,IAAIC,MAAM,cAJnC,mF,wBAQQ,SAASC,IACb,OAAOX,EAAuB,GAAD,OAAIF,EAAJ,uCAA2CC,IAGrE,SAASa,EAAiBC,GAC7B,OAAOb,EAAuB,GAAD,OAAIF,EAAJ,iCAAqCC,EAArC,kBAAsDc,EAAtD,YAG1B,SAASC,EAAkBC,GAC9B,OAAOf,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBiB,EAAtB,oBAAyChB,IAGnE,SAASiB,EAAiBD,GAC7B,OAAOf,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBiB,EAAtB,4BAAiDhB,IAG3E,SAASkB,EAAkBF,GAC9B,OAAOf,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBiB,EAAtB,4BAAiDhB,M,0ICzBnE,SAASmB,EAAT,GAAgC,IAAZC,EAAW,EAAXA,SAC/B,EAAwBC,mBAAS,IAAjC,mBAAOP,EAAP,KAAaQ,EAAb,KAcA,OACI,wBAAQC,UAAU,YAAlB,SACI,uBAAMH,SAXO,SAAAI,GACjBA,EAAEC,iBACkB,KAAhBX,EAAKY,OAITN,EAASN,GAHLa,OAAOC,MAAM,oFAQiBL,UAAU,aAAxC,UACI,uBACIM,MAAOf,EACPS,UAAU,mBACVO,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZnB,KAAK,SACLoB,SAvBS,SAAAV,GACrBF,EAAQE,EAAEW,cAAcN,MAAMO,kBAwBtB,wBAAQN,KAAK,SAASP,UAAU,oBAAhC,SACI,sBAAMA,UAAU,0BAAhB,2BCzBL,SAASc,IACpB,MAA4BhB,mBAAS,IAArC,mBAAOiB,EAAP,KAAeC,EAAf,KACA,EAAwBlB,mBAAS,IAAjC,mBAAOP,EAAP,KAAaQ,EAAb,KACA,EAA4BD,mBAAS,QAArC,mBAAOmB,EAAP,KAAeC,EAAf,KAmBA,OAjBAC,qBAAU,WACD5B,IAIL2B,EAAU,WACVE,IAA4B7B,GAAM8B,MAAK,SAAAC,GAGnC,GAFAN,EAAUM,EAAEC,SACZL,EAAU,WACA,IAANI,EACA,OAAOJ,EAAU,eAI1B,CAAC3B,IAIA,qCACI,cAACK,EAAD,CAAWC,SAAUE,IACT,SAAXkB,GAAqB,6DACV,YAAXA,GAAwB,cAAC,IAAD,CACzBV,KAAK,OACLiB,MAAM,UACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,MAEG,YAAXV,GACG,6BACCF,GAAUA,EAAOa,KAAI,SAAAC,GAAK,OACvB,6BACI,cAAC,IAAD,CAAMC,GAAE,kBAAaD,EAAME,IAA3B,SAAkCF,EAAMG,SADnCH,EAAME","file":"static/js/8.42f545f1.chunk.js","sourcesContent":["const BASE_URL = `https://api.themoviedb.org/3`;\r\nconst API_KEY = 'd487c6d6cc7f608fd9f791a1c234621c';\r\n\r\nasync function fetchWithErrorHandling(url = '', config = {}) {\r\n    const response = await fetch(url, config);\r\n    return response.ok\r\n        ? await response.json()\r\n        : Promise.reject(new Error('Not Found'));\r\n};\r\n\r\n\r\nexport  function trendMoviedbAPI() {\r\n    return fetchWithErrorHandling(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`)\r\n};\r\n\r\nexport function searchMoviedbAPI(name) {\r\n    return fetchWithErrorHandling(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${name}&page=1`)\r\n};\r\n\r\nexport function detailsMoviedbAPI(movieId) {\r\n    return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`)\r\n};\r\n\r\nexport function actorsMoviedbAPI(movieId) {\r\n    return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`)\r\n};\r\n\r\nexport function reviewsMoviedbAPI(movieId) {\r\n    return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`)\r\n};\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Searchbar({onSubmit}) {\r\n    const [name, setName] = useState('');\r\n\r\n    const handleNameChange = e => {\r\n        setName(e.currentTarget.value.toLowerCase())\r\n    };\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (name.trim() === '') {\r\n            window.alert('Введите запрос');\r\n            return;\r\n         }\r\n        onSubmit(name);     \r\n    }   \r\n\r\n    return (\r\n        <header className=\"Searchbar\">\r\n            <form onSubmit={handleSubmit} className=\"SearchForm\">                \r\n                <input\r\n                    value={name}\r\n                    className=\"SearchForm-input\"\r\n                    type=\"text\"\r\n                    autoComplete=\"off\"\r\n                    autoFocus\r\n                    placeholder=\"Search movie\"\r\n                    name=\"search\"\r\n                    onChange={handleNameChange}\r\n                />\r\n                <button type=\"submit\" className=\"SearchForm-button\">\r\n                    <span className=\"SearchForm-button-label\">Search</span>\r\n                </button>\r\n            </form>\r\n        </header>\r\n    )\r\n};\r\n\r\nSearchbar.propTypes = {\r\n    onSubmit: PropTypes.func,\r\n};\r\n\r\n","import { useState, useEffect } from 'react';\r\nimport { Link  } from 'react-router-dom';\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nimport * as moviedbAPI from '../services/moviedbAPI';\r\nimport Searchbar from '../Components/Searchbar/Searchbar';\r\n\r\nexport default function MoviesPage() {\r\n    const [movies, setMovies] = useState([]);\r\n    const [name, setName] = useState('');\r\n    const [status, setStatus] = useState('init');\r\n    \r\n    useEffect(() => {\r\n        if (!name) {\r\n            return;\r\n        };\r\n\r\n        setStatus('pending');\r\n        moviedbAPI.searchMoviedbAPI(name).then(r => {\r\n            setMovies(r.results);\r\n            setStatus('success');\r\n            if (r === 0) {\r\n                return setStatus('error')\r\n            }\r\n        });\r\n\r\n    }, [name]\r\n    );\r\n        \r\n    return ( \r\n        <>\r\n            <Searchbar onSubmit={setName} />\r\n            {status === 'init' && <h1>Hello! Search something....</h1>}\r\n            {status === 'pending' && <Loader\r\n            type=\"Puff\"\r\n            color=\"#00BFFF\"\r\n            height={100}\r\n            width={100}\r\n            timeout={3000} //3 secs\r\n            />}\r\n            {status === 'success' &&\r\n                <ul>\r\n                {movies && movies.map(movie =>\r\n                    <li key={movie.id}>\r\n                        <Link to={`/movies/${movie.id}`}>{movie.title}</Link>\r\n                    </li>)}\r\n                </ul>}\r\n        </>\r\n    )\r\n};\r\n"],"sourceRoot":""}